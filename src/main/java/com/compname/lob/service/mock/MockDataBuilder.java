package com.compname.lob.service.mock;

import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.compname.lob.domain.report.DbParameter;
import com.compname.lob.domain.report.ReportData;
import com.compname.lob.domain.workorder.ClaimsWorkOrder;
import com.compname.lob.domain.workorder.DrugClaimsWorkOrder;
import com.compname.lob.domain.workorder.EligibilityWorkOrder;
import com.compname.lob.domain.workorder.WorkOrderRequestDate;

/**
 * MockDataBuilder
 * 
 * @author vegirl1
 * @since Aug 4, 2015
 * @version $Revision$
 */
public class MockDataBuilder {

    public static EligibilityWorkOrder mockEligibilityWorkOrder() {
        EligibilityWorkOrder eligibilityWorkOrder = new EligibilityWorkOrder();

        eligibilityWorkOrder.setSlacGroupNumber("12345");
        eligibilityWorkOrder.setClientName("Mock Client Name");
        //
        eligibilityWorkOrder.setConversionDate("20150801");
        //
        eligibilityWorkOrder.setVLOADFormat("Yes");
        eligibilityWorkOrder.setGipsyFormat("No");
        eligibilityWorkOrder.setSAGFormat("No");
        eligibilityWorkOrder.setReRunInitialRequest("No");

        WorkOrderRequestDate initialRequestDate = new WorkOrderRequestDate("20150801", WorkOrderRequestDate.CURRENT);
        eligibilityWorkOrder.setInitialRequestRunDate(initialRequestDate);

        eligibilityWorkOrder.setDataIntegrityReport("20150801");
        eligibilityWorkOrder.setActiveClassAndDivExcpRprtRunDate("20150801");
        eligibilityWorkOrder.setPharmacareRptRunDate("20150801");
        eligibilityWorkOrder.setWaiverOfPremiumRunDate("20150801");
        eligibilityWorkOrder.setGipsyEmailReportRunDate("20150801");
        eligibilityWorkOrder.setPharmaCareEnrollDate("20150801");
        //

        WorkOrderRequestDate deltaFirstRequestDate = new WorkOrderRequestDate("20150820", WorkOrderRequestDate.DELTA);
        WorkOrderRequestDate deltaSecondRequestDate = new WorkOrderRequestDate("20150825", WorkOrderRequestDate.DELTA);
        List<WorkOrderRequestDate> deltaRequestRunDates = Lists.newLinkedList();
        deltaRequestRunDates.add(deltaFirstRequestDate);
        deltaRequestRunDates.add(deltaSecondRequestDate);
        eligibilityWorkOrder.setDeltaRequestRunDates(deltaRequestRunDates);

        eligibilityWorkOrder.setReRunDeltaRequest("No");
        eligibilityWorkOrder.setFutureTransactionReportRunDate("20150825");
        eligibilityWorkOrder.setCertifcateMappingReportRunDate("20150801");
        //

        Map<String, List<List<String>>> planMaps = Maps.newLinkedHashMap();
        planMaps.put("table.MCNT-CORE", getPlanMapping());

        eligibilityWorkOrder.setPlanMaps(planMaps);
        //

        Map<String, List<List<String>>> benefitMaps = getBenefitMapping();
        eligibilityWorkOrder.setBenefitMaps(benefitMaps);

        eligibilityWorkOrder.setCertConversionRequired("Yes");
        eligibilityWorkOrder.setCertAutoGenerated("Yes");
        eligibilityWorkOrder.setStartingCertNumber("111222333");

        //
        Map<String, List<List<String>>> certificateMaps = getCertificateMaps();
        eligibilityWorkOrder.setCertificateMaps(certificateMaps);
        //
        ClaimsWorkOrder claimsWorkOrder = mockClaimsWorkOrder();

        eligibilityWorkOrder.setClaimsWorkOrder(claimsWorkOrder);

        DrugClaimsWorkOrder drugWorkOrder = new DrugClaimsWorkOrder();
        BeanUtils.copyProperties(claimsWorkOrder, drugWorkOrder);
        eligibilityWorkOrder.setDrugClaimsWorkOrder(drugWorkOrder);

        eligibilityWorkOrder.setDeductibleMaps(getDeductibleMaps());

        return eligibilityWorkOrder;
    }

    /**
     * getPlanMapping
     * 
     * @return
     */
    public static List<List<String>> getPlanMapping() {
        List<List<String>> planLists = Lists.newLinkedList();
        for (int i = 0; i < 4; i++) {
            List<String> plan = Lists.newLinkedList();
            plan.add("12345");
            plan.add("0" + i + 1);
            plan.add("101");
            plan.add("612345");
            plan.add("1");
            plan.add("1");
            plan.add("A");
            planLists.add(plan);
        }
        return planLists;
    }

    /**
     * getBenefitMapping
     * 
     * @return
     */
    public static Map<String, List<List<String>>> getBenefitMapping() {
        Map<String, List<List<String>>> benefitMaps = Maps.newLinkedHashMap();
        List<List<String>> benefitLists = Lists.newLinkedList();
        List<String> benefit = Lists.newLinkedList();
        benefit.add("ADD");
        benefit.add("ADD - Basic AD &D");
        benefit.add("DABE");
        benefit.add("Member AD & D Basic");
        benefit.add(null);
        benefitLists.add(benefit);

        List<String> benefit1 = Lists.newLinkedList();
        benefit1.add("ANS");
        benefit1.add("ANS- Additional Non-Registered SPP");
        benefit1.add(null);
        benefit1.add(null);
        benefit1.add(null);
        benefitLists.add(benefit1);

        List<String> benefit2 = Lists.newLinkedList();
        benefit2.add("ARS");
        benefit2.add("ARS- Additional Registered SPP");
        benefit2.add(null);
        benefit2.add(null);
        benefit2.add(null);
        benefitLists.add(benefit2);
        benefitMaps.put("table.BNFT_MAPP", benefitLists);
        return benefitMaps;
    }

    /**
     * getCertificateMaps
     * 
     * @return
     */
    public static Map<String, List<List<String>>> getCertificateMaps() {
        Map<String, List<List<String>>> certificateMaps = Maps.newLinkedHashMap();
        List<List<String>> certificateLists = Lists.newLinkedList();
        for (int i = 0; i < 10; i++) {
            List<String> certificate = Lists.newLinkedList();
            certificate.add("11122233" + i);
            certificate.add("99988877" + i);
            certificateLists.add(certificate);
        }
        certificateMaps.put("table.CERT_MAPP", certificateLists);
        return certificateMaps;
    }

    public static Map<String, List<List<String>>> getDeductibleMaps() {
        Map<String, List<List<String>>> deductibleMaps = Maps.newLinkedHashMap();
        List<List<String>> deductiblesLists = Lists.newLinkedList();
        for (int i = 0; i < 5; i++) {
            List<String> deductibles = Lists.newLinkedList();
            deductibles.add("12345");
            deductibles.add("10" + i);

            if ((i % 2) == 0) {
                deductibles.add("Yes");
            } else {
                deductibles.add("No");
            }

            deductiblesLists.add(deductibles);
        }
        deductibleMaps.put("table.DEDUCTIBLE", deductiblesLists);
        return deductibleMaps;
    }

    public static Map<String, List<List<String>>> getEmptyDeductibleMaps() {
        Map<String, List<List<String>>> deductibleMaps = Maps.newLinkedHashMap();
        List<List<String>> deductiblesLists = Lists.newLinkedList();
        deductibleMaps.put("table.DEDUCTIBLE", deductiblesLists);
        return deductibleMaps;
    }

    /**
     * mockClaimsWorkOrder
     * 
     * @return ClaimsWorkOrder
     */
    public static ClaimsWorkOrder mockClaimsWorkOrder() {
        ClaimsWorkOrder claimsWorkOrder = new ClaimsWorkOrder();
        claimsWorkOrder.setClientName("Mock Claim Client Name");
        claimsWorkOrder.setConversionDate("20150901");
        claimsWorkOrder.setClaimBackdatedEffectiveDate("20150901");
        claimsWorkOrder.setClaimReimbursement("N");
        claimsWorkOrder.setClaimPayDirect("Y");

        WorkOrderRequestDate initialRequestDate = new WorkOrderRequestDate("20150901", WorkOrderRequestDate.CURRENT);
        claimsWorkOrder.setInitialRequestRunDate(initialRequestDate);

        claimsWorkOrder.setReRunInitialRequest("No");

        WorkOrderRequestDate deltaRequestDate = new WorkOrderRequestDate("20150901", WorkOrderRequestDate.DELTA);
        List<WorkOrderRequestDate> deltaRequestRunDates = Lists.newLinkedList();
        deltaRequestRunDates.add(deltaRequestDate);
        claimsWorkOrder.setDeltaRequestRunDates(deltaRequestRunDates);

        claimsWorkOrder.setReRunDeltaRequest("N");
        return claimsWorkOrder;
    }

    public static ReportData mockReportData() {

        ReportData reportData = new ReportData();

        List<Map<String, Object>> dsValues = Lists.newArrayList();
        Map<String, Object> rowValues_1 = Maps.newHashMap();
        rowValues_1.put("WO_KEY", "99");
        rowValues_1.put("ML_GR_NUM", "699999");
        rowValues_1.put("EXTRACTION_TYPE", "INITIAL");
        rowValues_1.put("SL_GR_NUM", "44599");

        Map<String, Object> rowValues_2 = Maps.newHashMap();
        rowValues_2.put("WO_KEY", "100");
        rowValues_2.put("ML_GR_NUM", "699991");
        rowValues_2.put("EXTRACTION_TYPE", "DELTA");
        rowValues_2.put("SL_GR_NUM", "44591");

        dsValues.add(rowValues_1);
        dsValues.add(rowValues_2);

        reportData.setWorkOrderKeyValues(dsValues);

        return reportData;
    }

    /**
     * getDummyDataSourceValues
     * 
     * @return
     */
    public static List<Map<String, Object>> getExistingWorkOrderDataSourceValues() {
        List<Map<String, Object>> dsValues = Lists.newArrayList();
        Map<String, Object> row_1 = Maps.newHashMap();
        row_1.put("WO_KEY", "1");
        row_1.put("INIT_RQST_RUN_DT", "20150901");
        row_1.put("DELTA_RQST_RUN_DT", "20151101");
        row_1.put("PRCES_INIT_STRT_DT", "");
        row_1.put("PRCES_DELTA_STRT_DT", "");

        dsValues.add(row_1);
        return dsValues;
    }

    /**
     * getDataSourceValues
     * 
     * @return
     */
    public static List<Map<String, Object>> getDummyDataSourceValues() {
        List<Map<String, Object>> dsValues = Lists.newArrayList();
        Map<String, Object> row_1 = Maps.newHashMap();
        row_1.put("Col1", "Column 1 Header");
        row_1.put("Col2", "Column 2 Header");

        Map<String, Object> row_2 = Maps.newHashMap();
        row_2.put("Col1", "Row1 Col1 Value");
        row_2.put("Col2", "Row1 Col2 Value");

        dsValues.add(row_1);
        dsValues.add(row_2);
        return dsValues;
    }

    /**
     * getDbParameters
     * 
     * @return
     */
    public static List<DbParameter> getDbParameters() {
        List<DbParameter> params = Lists.newArrayList();
        params.add(new DbParameter("p_ML_GR_NUM", "VARCHAR", "maincursor.ML_GR_NUM", null));
        params.add(new DbParameter("p_WorkOrderKey", "NUMBER", "maincursor.WO_KEY", null));
        return params;
    }

    /**
     * getFileSheetHeaders
     * 
     * @return
     */
    public static Map<String, String> getFileSheetHeaders() {
        Map<String, String> fileSheetHeaders = Maps.newHashMap();
        fileSheetHeaders.put("predetermination.Health-Dental_Pred", "Claims Pred Report");
        return fileSheetHeaders;
    }

    /**
     * getDatasourceNames
     * 
     * @return
     */
    public static Map<String, String> getDatasourceNames() {
        Map<String, String> datasourceNames = Maps.newHashMap();
        datasourceNames.put("predetermination.Health-Dental_Pred", "dummyStorProc(p_WorkOrderKey,p_ML_GR_NUM)");
        return datasourceNames;
    }

    /**
     * getFileNames
     * 
     * @return
     */
    public static Map<String, String> getFileNames() {
        Map<String, String> fileNames = Maps.newHashMap();
        fileNames.put("predetermination.initial", "G[p_ML_GR_NUM]_Pre-Determinations_{0,date,yyyy-MM-dd-HHmmss}");
        fileNames.put("predetermination.delta", "G[p_ML_GR_NUM]_Delta_Pre-Determinations_{0,date,yyyy-MM-dd-HHmmss}");
        return fileNames;
    }

    /**
     * getFileSheetNames
     * 
     * @return
     */
    public static Map<String, List<String>> getFileSheetNames() {
        Map<String, List<String>> fileSheetNames = Maps.newConcurrentMap();
        fileSheetNames.put("predetermination", Lists.newArrayList("Health-Dental_Pred"));
        return fileSheetNames;
    }
}
